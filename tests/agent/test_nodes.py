import pytest
from unittest.mock import MagicMock
import uuid

from app.agent.nodes.extract_tasks import task_generation_node
from app.schemas.task import Task, TaskList

@pytest.fixture
def mock_llm():
    """Fixture to create a mock LLM that returns a predictable TaskList."""
    # Create a mock TaskList object to be returned by the mock LLM
    mock_task = Task(
        id=uuid.uuid4(),
        task_name="Mock Task",
        task_description="A task generated by a mock LLM.",
        estimated_day=3,
    )
    mock_task_list = TaskList(tasks=[mock_task])

    # Mock the chain of calls: llm.with_structured_output().invoke()
    mock_structured_llm = MagicMock()
    mock_structured_llm.invoke.return_value = mock_task_list
    
    mock_llm_instance = MagicMock()
    mock_llm_instance.with_structured_output.return_value = mock_structured_llm
    
    return mock_llm_instance

def test_task_generation_node(mocker, mock_llm):
    """
    Tests the task_generation_node to ensure it processes input correctly
    and returns a state with the mocked tasks.
    """
    # Arrange
    # Patch the global `llm` instance in the llm_service module
    mocker.patch('app.services.llm_service.llm', mock_llm)

    initial_state = {
        "project_description": "Create a simple web application.",
        # ... other state fields can be added if needed
    }

    # Act
    result_state = task_generation_node(initial_state)

    # Assert
    # Check that the llm's structured output method was called with the correct schema
    mock_llm.with_structured_output.assert_called_once_with(TaskList)
    
    # Check that the invoke method was called
    mock_llm.with_structured_output.return_value.invoke.assert_called_once()
    
    # Check that the state was updated correctly with the tasks from the mock
    assert "tasks" in result_state
    assert isinstance(result_state["tasks"], TaskList)
    assert len(result_state["tasks"].tasks) == 1
    assert result_state["tasks"].tasks[0].task_name == "Mock Task" 